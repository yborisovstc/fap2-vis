<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Enhanced Discrete Events System visualization module. Design.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.01 at 29-Aug-2019</releaseinfo>

	<abstract>
	    <simpara>This document collects software desing for Discrete Events System visualization module.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>25-Jun-2015</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist><title>References</title>
	<biblioentry id="ref_rfc_3986"> <abbrev>RFC_3986_URI</abbrev>
	    <productname><ulink url="http://www.ietf.org/rfc/rfc3986.txt"/></productname>
	    <title>RFC 3986: Uniform Resource Identifier (URI): Generic Syntax</title> </biblioentry>
    </bibliolist>


    <glossary> <title>Glossary</title> 
	<glossentry id="gls_cp"><glossterm>CP</glossterm> <acronym>CP</acronym>
	    <glossdef> <para>Connection Point</para> <para>
		    Element that is used as endpoint of connections between systems.  
		    </para></glossdef> </glossentry>
	<glossentry id="gls_irm"><glossterm>IRM</glossterm>
	    <glossdef> <para>Interface resolution mechanism, ref <ulink url="../../../grayb/doc/design/index.html"/>
	</para></glossdef> </glossentry>
	<glossentry id="gls_sew"><glossterm>SEW</glossterm> <acronym>SEW</acronym>
	    <glossdef> <para>Slot Embeds Widget = approach of assosiating widget to slot in container when
		    slots simply embeds widget. Ref <xref linkend="ds_wdgs_cnt_wsa"/>.</para> </glossdef> </glossentry>
	<glossentry id="gls_slw"><glossterm>SLW</glossterm> <acronym>SLW</acronym>
	    <glossdef> <para>Slot Links to Widget = approach of assosiating widget to slot in container when
		slots is connected to widget. Ref <xref linkend="ds_wdgs_cnt_wsa"/>.</para> </glossdef> </glossentry>
	<glossentry id="gls_vrc"><glossterm>VRC</glossterm> <acronym>VRC</acronym>
	    <glossdef> <para>Visual Representation Controller - agent that managed model representing in visual form.
		One of key part of models visual representation architecture.</para> </glossdef> </glossentry>
    </glossary>

    <sect1 id="ds_wdgs"><title>Widget system</title>
	<sect2 id="ds_wdgs_cnt"><title>Containter</title>
	    <sect3 id="ds_wdgs_cnt_wsa"><title>How to associate owned widgets with slots?</title>
		<sect4><title>Intro</title>
		    <simpara>Each type of container possesses it's ownt structure of owned widgets. We can consider the placeholder in this 
			structure as container's slot. To arrange the owned widget the container needs to know which slot is assosiated with this
			particular widget. Slot is specified by the set of paremeters: ordering, padding, etc.</simpara>
		    <simpara>There is a number of approaches of assosiation the widgets to slots. Some of them are:</simpara>
		    <itemizedlist>
			<listitem>Don't explicitly specify slots, specifying slot is with widget itself
			    <simpara>To include slot id into widget name or content</simpara>
			    <simpara>The cons are that replacing of the widget breaks the layout - we need to specify the slot parameters again.</simpara>
			</listitem>
			<listitem>Don't explicitly specify slots, use slot connections to setup slots ordering</listitem>
			<listitem>Specify slots explicitly, embed widget to the slot (<xref linkend="gls_sew"/>)
			    <simpara>Pros: <xref linkend="gls_irm"/> can be simply supported</simpara>
			    <simpara>Cons: extra components in the containter; inconvenient access to widget (any URI accessing widget includes slot name)</simpara>
			</listitem>
			<listitem>Specify slots explicitly, connect widget to the slot (<xref linkend="gls_slw"/>)
			    <simpara>Pros: simple re-configuration; simple access to widget (with embedding approach any URI accessing widget includes
				slot name)</simpara>
			    <simpara>Cons: <xref linkend="gls_irm"/> routing customization is complicate </simpara>
			</listitem>
		    </itemizedlist>
		</sect4>
		<sect4 id="ds_wdgs_cnt_wsa_slw"><title>Approach of slot assosiating via link to widget (<xref linkend="gls_slw"/>)</title>
		    <simpara>This approach shows that even the layouting (i.e. transition of widget allocation) can be effectively implemented in slots.
			This mean that the layouting gets distributed! With this approach slot acts as widget "extension" containing tranitions of widget allocation.
			</simpara>
		</sect4>
	    </sect3>
	    <sect3><title>How to establish <xref linkend="gls_irm"/> net.</title>
		<sect4><title>Intro</title>
		    <simpara>There is a lot of binding via ifaces between container's compositor and widgets. At least the biniding for 
			base widgets states is required: requisition and allocation. To support the routing we can use custom routing in the following nodes:
			container agent, slot, widget. However this routing require analysis of native hier structure in many cases.</simpara>
		    <simpara>One of simplistic solution can be using helper interfaces for container agent and widget. These ifaces just to help
			routing, they just need to provide primary ifaces.</simpara>
		</sect4>
	    </sect3>
	</sect2>
	<sect2><title>Rendering text</title>
	    <sect3><title>Refs</title>
		<biblioentry id="ref_ftgl_dcm"> <abbrev>FTGL_DCM</abbrev>
		    <productname><ulink url="http://ftgl.sourceforge.net/docs/html/index.html"/></productname>
		    <title>FTGL documentation</title> </biblioentry>
		<biblioentry id="ref_ubtfont"> <abbrev>UBTFONT</abbrev>
		    <productname><ulink url="https://design.ubuntu.com/font/"/></productname>
		    <title>Ubuntu font</title> </biblioentry>
	    </sect3>
	    <sect3><title>FTGL</title>
		<simpara>Installation</simpara>
		<programlisting>
		    sudo apt-get install libftgl2 libftgl-dev
		    sudo apt-get install libfreetype6-dev libfreetype6
		</programlisting>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_desvrc"><title>DES Visual representation controller</title>
	<sect2><title>Intro</title>
	    <simpara>Currently (6d85d67677f5c) <xref linkend="gls_vrc"/> is implemented with using of custom native agent
		AVrController and custom transitions, like TrCurApplied.
		Even this approach promises to be more effective the primary design should be purely DES based without using
		custom agents.</simpara>
	</sect2>
	<sect2><title>Handling of cursor change</title>
	    <sect3><title>Intro</title>
		<simpara>Ref the diagram below for handling of cursor change.</simpara>
		<figure><imageobject> <imagedata fileref="./diagrams/vrc_appr_1/vrc_appr_1.png"/> </imageobject></figure>
	    </sect3>
	</sect2>
    </sect1>

    <sect1 id="ds_tohandle"><title>Traceability: To handle</title>

    </sect1>

</article>
